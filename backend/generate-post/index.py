"""
Business: Generate social media posts using OpenAI GPT-4 based on topic, platform and tone
Args: event - dict with httpMethod, body containing topic, platform, tone
      context - object with request_id attribute
Returns: HTTP response dict with generated post text
"""
import json
import os
from typing import Dict, Any, Literal

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    try:
        body_data = json.loads(event.get('body', '{}'))
        topic: str = body_data.get('topic', '')
        platform: str = body_data.get('platform', 'vk')
        tone: str = body_data.get('tone', 'friendly')
        
        if not topic:
            return {
                'statusCode': 400,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'isBase64Encoded': False,
                'body': json.dumps({'error': 'Topic is required'})
            }
        
        openai_key = os.environ.get('OPENAI_API_KEY')
        
        if not openai_key:
            templates = {
                'vk': {
                    'professional': f'üìä {topic}\n\n–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ —ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ. –í–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∞—Å–ø–µ–∫—Ç—ã:\n\n‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ\n‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ\n\n–î–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö! üëá',
                    'friendly': f'–ü—Ä–∏–≤–µ—Ç! üëã\n\n–î–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –ø—Ä–æ {topic.lower()}!\n\n–≠—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –∫–ª–∞—Å—Å–Ω–∞—è —Ç–µ–º–∞, –∏ –≤–æ—Ç –ø–æ—á–µ–º—É:\n‚ú® –≠—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ\n‚ú® –≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ\n‚ú® –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n–ê —á—Ç–æ –¥—É–º–∞–µ—Ç–µ –≤—ã? –ü–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö! üí¨',
                    'motivational': f'üí™ {topic}\n\n–ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –Ω–∞—Å –∫ —Ü–µ–ª–∏!\n\nüî• –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è\nüî• –í–µ—Ä—å –≤ —Å–µ–±—è\nüî• –î–µ–π—Å—Ç–≤—É–π —Å–µ–≥–æ–¥–Ω—è\n\n–¢–≤–æ–π —É—Å–ø–µ—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å! üöÄ\n\n#–º–æ—Ç–∏–≤–∞—Ü–∏—è #—É—Å–ø–µ—Ö #—Ä–∞–∑–≤–∏—Ç–∏–µ',
                },
                'telegram': {
                    'professional': f'<b>{topic}</b>\n\n–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n\n‚ñ´Ô∏è –ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏\n‚ñ´Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n‚ñ´Ô∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∑–∞–∫—Ä–µ–ø–µ –∫–∞–Ω–∞–ª–∞ üìå',
                    'friendly': f'{topic} üéØ\n\n–î—Ä—É–∑—å—è, —ç—Ç–æ –≤–∞–∂–Ω–æ!\n\nüí° –ì–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å: –≤—Å—ë –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö\nüí° –°–µ–∫—Ä–µ—Ç —É—Å–ø–µ—Ö–∞: –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω\n\n–°–æ—Ö—Ä–∞–Ω—è–π, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å! ‚≠êÔ∏è',
                    'motivational': f'‚ö°Ô∏è <b>{topic}</b>\n\nüéØ –¢–≤–æ—è —Ü–µ–ª—å - —Ç–≤–æ—è —Å–∏–ª–∞!\nüéØ –¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è - —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\nüéØ –¢–≤–æ—ë –≤—Ä–µ–º—è - –°–ï–ô–ß–ê–°!\n\n–ù–µ –∂–¥–∏ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞. –ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üî•\n\n#–º–æ—Ç–∏–≤–∞—Ü–∏—è #—Ü–µ–ª—å #–¥–µ–π—Å—Ç–≤–∏–µ',
                },
                'instagram': {
                    'professional': f'{topic} ‚ú®\n\n–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É.\n\n–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:\n1Ô∏è‚É£ –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ\n2Ô∏è‚É£ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ\n3Ô∏è‚É£ –ò–∑–º–µ—Ä–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n–°–æ—Ö—Ä–∞–Ω–∏ –ø–æ—Å—Ç, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ üîñ\n\n#–±–∏–∑–Ω–µ—Å #—Ä–∞–∑–≤–∏—Ç–∏–µ #–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º #—É—Å–ø–µ—Ö #–∫–∞—Ä—å–µ—Ä–∞',
                    'friendly': f'–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! üíï\n\n{topic} - –≤–æ—Ç –æ —á—ë–º —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è!\n\n–ó–Ω–∞–µ—Ç–µ, —ç—Ç–æ —Ç–∞–∫ –≤–∞–∂–Ω–æ:\nüå∏ –ë—ã—Ç—å —Å–æ–±–æ–π\nüå∏ –î–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º\nüå∏ –í–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö\n\n–ê –≤—ã –∫–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —ç—Ç–æ–º—É? üí≠\n\n#–∂–∏–∑–Ω—å #–º—ã—Å–ª–∏ #–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ #lifestyle #–ø–æ–∑–∏—Ç–∏–≤',
                    'motivational': f'{topic} üî•\n\n–ó–ê–ü–û–ú–ù–ò:\n\nüíé –¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å\nüíé –¢—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –±–æ–ª—å—à–µ–µ\nüíé –¢–≤–æ—ë –≤—Ä–µ–º—è –ø—Ä–∏—à–ª–æ\n\n–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –º–µ—á—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞! –î–µ–π—Å—Ç–≤—É–π –°–ï–ô–ß–ê–°! ‚ö°Ô∏è\n\n–û—Ç–º–µ—Ç—å —Ç–æ–≥–æ, –∫–æ–º—É –Ω—É–∂–Ω–∞ —ç—Ç–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è! üëá\n\n#–º–æ—Ç–∏–≤–∞—Ü–∏—è #—Ü–µ–ª–∏ #—É—Å–ø–µ—Ö #—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ #inspiration',
                },
            }
            
            generated_text = templates.get(platform, {}).get(tone, f'{topic}\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω—ã.')
            
            return {
                'statusCode': 200,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'isBase64Encoded': False,
                'body': json.dumps({
                    'text': generated_text,
                    'source': 'template'
                })
            }
        
        try:
            import openai
            
            client = openai.OpenAI(api_key=openai_key)
            
            platform_names = {
                'vk': '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
                'telegram': 'Telegram',
                'instagram': 'Instagram'
            }
            
            tone_instructions = {
                'professional': '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å',
                'friendly': '–¥—Ä—É–∂–µ—Å–∫–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å',
                'motivational': '–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Å—Ç–∏–ª—å'
            }
            
            platform_specs = {
                'vk': '–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ. –î–ª–∏–Ω–∞ 200-400 —Å–∏–º–≤–æ–ª–æ–≤. –ü—Ä–∏–∑—ã–≤ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.',
                'telegram': '–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É (<b>, <i>). –î–ª–∏–Ω–∞ 150-300 —Å–∏–º–≤–æ–ª–æ–≤. –õ–∞–∫–æ–Ω–∏—á–Ω–æ –∏ –ø–æ –¥–µ–ª—É.',
                'instagram': '–ú–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ –∏ —Ö—ç—à—Ç–µ–≥–æ–≤ –≤ –∫–æ–Ω—Ü–µ. –î–ª–∏–Ω–∞ 300-500 —Å–∏–º–≤–æ–ª–æ–≤. –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.'
            }
            
            prompt = f"""–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ {platform_names.get(platform, platform)} –Ω–∞ —Ç–µ–º—É "{topic}".

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –¢–æ–Ω: {tone_instructions.get(tone, tone)}
- {platform_specs.get(platform, '')}
- –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ

–°–æ–∑–¥–∞–π –≥–æ—Ç–æ–≤—ã–π –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç:"""

            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π SMM-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, —Å–æ–∑–¥–∞—é—â–∏–π –≤–∏—Ä—É—Å–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.8
            )
            
            generated_text = response.choices[0].message.content.strip()
            
            return {
                'statusCode': 200,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'isBase64Encoded': False,
                'body': json.dumps({
                    'text': generated_text,
                    'source': 'openai'
                })
            }
            
        except ImportError:
            return {
                'statusCode': 500,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'isBase64Encoded': False,
                'body': json.dumps({'error': 'OpenAI library not installed'})
            }
        except Exception as e:
            return {
                'statusCode': 500,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'isBase64Encoded': False,
                'body': json.dumps({'error': f'OpenAI error: {str(e)}'})
            }
            
    except json.JSONDecodeError:
        return {
            'statusCode': 400,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': json.dumps({'error': 'Invalid JSON'})
        }
